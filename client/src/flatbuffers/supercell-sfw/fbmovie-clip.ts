// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { FBMovieClipFrame } from '../supercell-sfw/fbmovie-clip-frame.js';
import { FBMovieClipShortFrame } from '../supercell-sfw/fbmovie-clip-short-frame.js';


export class FBMovieClip {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FBMovieClip {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFBMovieClip(bb:flatbuffers.ByteBuffer, obj?:FBMovieClip):FBMovieClip {
  return (obj || new FBMovieClip()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFBMovieClip(bb:flatbuffers.ByteBuffer, obj?:FBMovieClip):FBMovieClip {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FBMovieClip()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

exportNameRefId():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

fps():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

frameCount():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

property():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

childIds(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint16(this.bb!.__vector(this.bb_pos + offset) + index * 2) : 0;
}

childIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

childIdsArray():Uint16Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? new Uint16Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

childNameRefIds(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

childNameRefIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

childNameRefIdsArray():Int32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

childBlends(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

childBlendsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

childBlendsArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

frames(index: number, obj?:FBMovieClipFrame):FBMovieClipFrame|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new FBMovieClipFrame()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 8, this.bb!) : null;
}

framesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

frameElementOffset():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

matrixBankIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

scalingGridIndex():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : -1;
}

shortFrames(index: number, obj?:FBMovieClipShortFrame):FBMovieClipShortFrame|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? (obj || new FBMovieClipShortFrame()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 2, this.bb!) : null;
}

shortFramesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFBMovieClip(builder:flatbuffers.Builder) {
  builder.startObject(13);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt16(0, id, 0);
}

static addExportNameRefId(builder:flatbuffers.Builder, exportNameRefId:number) {
  builder.addFieldInt32(1, exportNameRefId, 0);
}

static addFps(builder:flatbuffers.Builder, fps:number) {
  builder.addFieldInt8(2, fps, 0);
}

static addFrameCount(builder:flatbuffers.Builder, frameCount:number) {
  builder.addFieldInt16(3, frameCount, 0);
}

static addProperty(builder:flatbuffers.Builder, property:number) {
  builder.addFieldInt8(4, property, 0);
}

static addChildIds(builder:flatbuffers.Builder, childIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, childIdsOffset, 0);
}

static createChildIdsVector(builder:flatbuffers.Builder, data:number[]|Uint16Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createChildIdsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createChildIdsVector(builder:flatbuffers.Builder, data:number[]|Uint16Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(2, data.length, 2);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt16(data[i]!);
  }
  return builder.endVector();
}

static startChildIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(2, numElems, 2);
}

static addChildNameRefIds(builder:flatbuffers.Builder, childNameRefIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, childNameRefIdsOffset, 0);
}

static createChildNameRefIdsVector(builder:flatbuffers.Builder, data:number[]|Int32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createChildNameRefIdsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createChildNameRefIdsVector(builder:flatbuffers.Builder, data:number[]|Int32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startChildNameRefIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addChildBlends(builder:flatbuffers.Builder, childBlendsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, childBlendsOffset, 0);
}

static createChildBlendsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startChildBlendsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addFrames(builder:flatbuffers.Builder, framesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, framesOffset, 0);
}

static startFramesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 4);
}

static addFrameElementOffset(builder:flatbuffers.Builder, frameElementOffset:number) {
  builder.addFieldInt32(9, frameElementOffset, 0);
}

static addMatrixBankIndex(builder:flatbuffers.Builder, matrixBankIndex:number) {
  builder.addFieldInt16(10, matrixBankIndex, 0);
}

static addScalingGridIndex(builder:flatbuffers.Builder, scalingGridIndex:number) {
  builder.addFieldInt32(11, scalingGridIndex, -1);
}

static addShortFrames(builder:flatbuffers.Builder, shortFramesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, shortFramesOffset, 0);
}

static startShortFramesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(2, numElems, 2);
}

static endFBMovieClip(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFBMovieClip(builder:flatbuffers.Builder, id:number, exportNameRefId:number, fps:number, frameCount:number, property:number, childIdsOffset:flatbuffers.Offset, childNameRefIdsOffset:flatbuffers.Offset, childBlendsOffset:flatbuffers.Offset, framesOffset:flatbuffers.Offset, frameElementOffset:number, matrixBankIndex:number, scalingGridIndex:number, shortFramesOffset:flatbuffers.Offset):flatbuffers.Offset {
  FBMovieClip.startFBMovieClip(builder);
  FBMovieClip.addId(builder, id);
  FBMovieClip.addExportNameRefId(builder, exportNameRefId);
  FBMovieClip.addFps(builder, fps);
  FBMovieClip.addFrameCount(builder, frameCount);
  FBMovieClip.addProperty(builder, property);
  FBMovieClip.addChildIds(builder, childIdsOffset);
  FBMovieClip.addChildNameRefIds(builder, childNameRefIdsOffset);
  FBMovieClip.addChildBlends(builder, childBlendsOffset);
  FBMovieClip.addFrames(builder, framesOffset);
  FBMovieClip.addFrameElementOffset(builder, frameElementOffset);
  FBMovieClip.addMatrixBankIndex(builder, matrixBankIndex);
  FBMovieClip.addScalingGridIndex(builder, scalingGridIndex);
  FBMovieClip.addShortFrames(builder, shortFramesOffset);
  return FBMovieClip.endFBMovieClip(builder);
}
}
