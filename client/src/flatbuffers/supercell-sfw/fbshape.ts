// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { FBShapeDrawBitmapCommand } from '../supercell-sfw/fbshape-draw-bitmap-command.js';


export class FBShape {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FBShape {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFBShape(bb:flatbuffers.ByteBuffer, obj?:FBShape):FBShape {
  return (obj || new FBShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFBShape(bb:flatbuffers.ByteBuffer, obj?:FBShape):FBShape {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FBShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

id():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

commands(index: number, obj?:FBShapeDrawBitmapCommand):FBShapeDrawBitmapCommand|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FBShapeDrawBitmapCommand()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;
}

commandsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFBShape(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addId(builder:flatbuffers.Builder, id:number) {
  builder.addFieldInt16(0, id, 0);
}

static addCommands(builder:flatbuffers.Builder, commandsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, commandsOffset, 0);
}

static startCommandsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(16, numElems, 4);
}

static endFBShape(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFBShape(builder:flatbuffers.Builder, id:number, commandsOffset:flatbuffers.Offset):flatbuffers.Offset {
  FBShape.startFBShape(builder);
  FBShape.addId(builder, id);
  FBShape.addCommands(builder, commandsOffset);
  return FBShape.endFBShape(builder);
}
}
