// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { FBShape } from '../supercell-sfw/fbshape.js';


export class FBShapes {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FBShapes {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFBShapes(bb:flatbuffers.ByteBuffer, obj?:FBShapes):FBShapes {
  return (obj || new FBShapes()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFBShapes(bb:flatbuffers.ByteBuffer, obj?:FBShapes):FBShapes {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FBShapes()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

shapes(index: number, obj?:FBShape):FBShape|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new FBShape()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

shapesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFBShapes(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addShapes(builder:flatbuffers.Builder, shapesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, shapesOffset, 0);
}

static createShapesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startShapesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endFBShapes(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishFBShapesBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedFBShapesBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createFBShapes(builder:flatbuffers.Builder, shapesOffset:flatbuffers.Offset):flatbuffers.Offset {
  FBShapes.startFBShapes(builder);
  FBShapes.addShapes(builder, shapesOffset);
  return FBShapes.endFBShapes(builder);
}
}
