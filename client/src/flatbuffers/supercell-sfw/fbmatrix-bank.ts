// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { FBColorTransform } from '../supercell-sfw/fbcolor-transform.js';
import { FBMatrix2x3 } from '../supercell-sfw/fbmatrix2x3.js';
import { FBShortMatrix2x3 } from '../supercell-sfw/fbshort-matrix2x3.js';


export class FBMatrixBank {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FBMatrixBank {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFBMatrixBank(bb:flatbuffers.ByteBuffer, obj?:FBMatrixBank):FBMatrixBank {
  return (obj || new FBMatrixBank()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFBMatrixBank(bb:flatbuffers.ByteBuffer, obj?:FBMatrixBank):FBMatrixBank {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FBMatrixBank()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

matrices(index: number, obj?:FBMatrix2x3):FBMatrix2x3|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new FBMatrix2x3()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;
}

matricesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

colorTransforms(index: number, obj?:FBColorTransform):FBColorTransform|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new FBColorTransform()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 7, this.bb!) : null;
}

colorTransformsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

shortMatrices(index: number, obj?:FBShortMatrix2x3):FBShortMatrix2x3|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new FBShortMatrix2x3()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) : null;
}

shortMatricesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFBMatrixBank(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addMatrices(builder:flatbuffers.Builder, matricesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, matricesOffset, 0);
}

static startMatricesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(24, numElems, 4);
}

static addColorTransforms(builder:flatbuffers.Builder, colorTransformsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, colorTransformsOffset, 0);
}

static startColorTransformsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(7, numElems, 1);
}

static addShortMatrices(builder:flatbuffers.Builder, shortMatricesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, shortMatricesOffset, 0);
}

static startShortMatricesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(12, numElems, 2);
}

static endFBMatrixBank(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFBMatrixBank(builder:flatbuffers.Builder, matricesOffset:flatbuffers.Offset, colorTransformsOffset:flatbuffers.Offset, shortMatricesOffset:flatbuffers.Offset):flatbuffers.Offset {
  FBMatrixBank.startFBMatrixBank(builder);
  FBMatrixBank.addMatrices(builder, matricesOffset);
  FBMatrixBank.addColorTransforms(builder, colorTransformsOffset);
  FBMatrixBank.addShortMatrices(builder, shortMatricesOffset);
  return FBMatrixBank.endFBMatrixBank(builder);
}
}
