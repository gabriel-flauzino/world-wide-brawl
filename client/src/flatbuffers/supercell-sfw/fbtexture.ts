// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class FBTexture {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FBTexture {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFBTexture(bb:flatbuffers.ByteBuffer, obj?:FBTexture):FBTexture {
  return (obj || new FBTexture()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFBTexture(bb:flatbuffers.ByteBuffer, obj?:FBTexture):FBTexture {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FBTexture()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

flags():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb_pos + offset) : 0;
}

type():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

width():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

height():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
}

data(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

dataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

dataArray():Int8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? new Int8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

textureFileRefId():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startFBTexture(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addFlags(builder:flatbuffers.Builder, flags:number) {
  builder.addFieldInt8(0, flags, 0);
}

static addType(builder:flatbuffers.Builder, type:number) {
  builder.addFieldInt8(1, type, 0);
}

static addWidth(builder:flatbuffers.Builder, width:number) {
  builder.addFieldInt16(2, width, 0);
}

static addHeight(builder:flatbuffers.Builder, height:number) {
  builder.addFieldInt16(3, height, 0);
}

static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, dataOffset, 0);
}

static createDataVector(builder:flatbuffers.Builder, data:number[]|Int8Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createDataVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createDataVector(builder:flatbuffers.Builder, data:number[]|Int8Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startDataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addTextureFileRefId(builder:flatbuffers.Builder, textureFileRefId:number) {
  builder.addFieldInt32(5, textureFileRefId, 0);
}

static endFBTexture(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFBTexture(builder:flatbuffers.Builder, flags:number, type:number, width:number, height:number, dataOffset:flatbuffers.Offset, textureFileRefId:number):flatbuffers.Offset {
  FBTexture.startFBTexture(builder);
  FBTexture.addFlags(builder, flags);
  FBTexture.addType(builder, type);
  FBTexture.addWidth(builder, width);
  FBTexture.addHeight(builder, height);
  FBTexture.addData(builder, dataOffset);
  FBTexture.addTextureFileRefId(builder, textureFileRefId);
  return FBTexture.endFBTexture(builder);
}
}
