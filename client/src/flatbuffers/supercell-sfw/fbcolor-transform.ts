// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class FBColorTransform {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FBColorTransform {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

r():number {
  return this.bb!.readUint8(this.bb_pos);
}

g():number {
  return this.bb!.readUint8(this.bb_pos + 1);
}

b():number {
  return this.bb!.readUint8(this.bb_pos + 2);
}

a():number {
  return this.bb!.readUint8(this.bb_pos + 3);
}

ra():number {
  return this.bb!.readUint8(this.bb_pos + 4);
}

ga():number {
  return this.bb!.readUint8(this.bb_pos + 5);
}

ba():number {
  return this.bb!.readUint8(this.bb_pos + 6);
}

static sizeOf():number {
  return 7;
}

static createFBColorTransform(builder:flatbuffers.Builder, r: number, g: number, b: number, a: number, ra: number, ga: number, ba: number):flatbuffers.Offset {
  builder.prep(1, 7);
  builder.writeInt8(ba);
  builder.writeInt8(ga);
  builder.writeInt8(ra);
  builder.writeInt8(a);
  builder.writeInt8(b);
  builder.writeInt8(g);
  builder.writeInt8(r);
  return builder.offset();
}

}
