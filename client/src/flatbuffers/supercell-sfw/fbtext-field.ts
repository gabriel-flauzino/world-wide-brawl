// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class FBTextField {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FBTextField {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

id():number {
  return this.bb!.readUint16(this.bb_pos);
}

unused0():number {
  return this.bb!.readUint16(this.bb_pos + 2);
}

fontNameRefId():number {
  return this.bb!.readInt32(this.bb_pos + 4);
}

left():number {
  return this.bb!.readInt16(this.bb_pos + 8);
}

top():number {
  return this.bb!.readInt16(this.bb_pos + 10);
}

right():number {
  return this.bb!.readInt16(this.bb_pos + 12);
}

bottom():number {
  return this.bb!.readInt16(this.bb_pos + 14);
}

color():number {
  return this.bb!.readInt32(this.bb_pos + 16);
}

outlineColor():number {
  return this.bb!.readInt32(this.bb_pos + 20);
}

defaultTextRefId():number {
  return this.bb!.readInt32(this.bb_pos + 24);
}

anotherTextRefId():number {
  return this.bb!.readInt32(this.bb_pos + 28);
}

styles():number {
  return this.bb!.readUint8(this.bb_pos + 32);
}

align():number {
  return this.bb!.readUint8(this.bb_pos + 33);
}

fontSize():number {
  return this.bb!.readUint8(this.bb_pos + 34);
}

unused1():number {
  return this.bb!.readUint8(this.bb_pos + 35);
}

unused2():number {
  return this.bb!.readInt32(this.bb_pos + 36);
}

static sizeOf():number {
  return 40;
}

static createFBTextField(builder:flatbuffers.Builder, id: number, unused0: number, font_name_ref_id: number, left: number, top: number, right: number, bottom: number, color: number, outline_color: number, default_text_ref_id: number, another_text_ref_id: number, styles: number, align: number, font_size: number, unused1: number, unused2: number):flatbuffers.Offset {
  builder.prep(4, 40);
  builder.writeInt32(unused2);
  builder.writeInt8(unused1);
  builder.writeInt8(font_size);
  builder.writeInt8(align);
  builder.writeInt8(styles);
  builder.writeInt32(another_text_ref_id);
  builder.writeInt32(default_text_ref_id);
  builder.writeInt32(outline_color);
  builder.writeInt32(color);
  builder.writeInt16(bottom);
  builder.writeInt16(right);
  builder.writeInt16(top);
  builder.writeInt16(left);
  builder.writeInt32(font_name_ref_id);
  builder.writeInt16(unused0);
  builder.writeInt16(id);
  return builder.offset();
}

}
