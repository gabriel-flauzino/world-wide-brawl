// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { FBMovieClip } from '../supercell-sfw/fbmovie-clip.js';


export class FBMovieClips {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FBMovieClips {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFBMovieClips(bb:flatbuffers.ByteBuffer, obj?:FBMovieClips):FBMovieClips {
  return (obj || new FBMovieClips()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFBMovieClips(bb:flatbuffers.ByteBuffer, obj?:FBMovieClips):FBMovieClips {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FBMovieClips()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

clips(index: number, obj?:FBMovieClip):FBMovieClip|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new FBMovieClip()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

clipsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFBMovieClips(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addClips(builder:flatbuffers.Builder, clipsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, clipsOffset, 0);
}

static createClipsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startClipsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endFBMovieClips(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishFBMovieClipsBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedFBMovieClipsBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createFBMovieClips(builder:flatbuffers.Builder, clipsOffset:flatbuffers.Offset):flatbuffers.Offset {
  FBMovieClips.startFBMovieClips(builder);
  FBMovieClips.addClips(builder, clipsOffset);
  return FBMovieClips.endFBMovieClips(builder);
}
}
