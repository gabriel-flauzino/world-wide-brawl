// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { FBMatrixBank } from '../supercell-sfw/fbmatrix-bank.js';
import { FBMovieClipFrameElement } from '../supercell-sfw/fbmovie-clip-frame-element.js';
import { FBRect } from '../supercell-sfw/fbrect.js';
import { FBShapePoint } from '../supercell-sfw/fbshape-point.js';


export class FBResources {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FBResources {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFBResources(bb:flatbuffers.ByteBuffer, obj?:FBResources):FBResources {
  return (obj || new FBResources()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFBResources(bb:flatbuffers.ByteBuffer, obj?:FBResources):FBResources {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FBResources()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

strings(index: number):string
strings(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
strings(index: number,optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
}

stringsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

unk2(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

unk2Length():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

unk2Array():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

unk3(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

unk3Length():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

unk3Array():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

scalingGrids(index: number, obj?:FBRect):FBRect|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new FBRect()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;
}

scalingGridsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

movieClipFrameElements(index: number, obj?:FBMovieClipFrameElement):FBMovieClipFrameElement|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new FBMovieClipFrameElement()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 6, this.bb!) : null;
}

movieClipFrameElementsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

shapePoints(index: number, obj?:FBShapePoint):FBShapePoint|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new FBShapePoint()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) : null;
}

shapePointsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

matrixBanks(index: number, obj?:FBMatrixBank):FBMatrixBank|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new FBMatrixBank()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

matrixBanksLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startFBResources(builder:flatbuffers.Builder) {
  builder.startObject(7);
}

static addStrings(builder:flatbuffers.Builder, stringsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, stringsOffset, 0);
}

static createStringsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startStringsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUnk2(builder:flatbuffers.Builder, unk2Offset:flatbuffers.Offset) {
  builder.addFieldOffset(1, unk2Offset, 0);
}

static createUnk2Vector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createUnk2Vector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createUnk2Vector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startUnk2Vector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addUnk3(builder:flatbuffers.Builder, unk3Offset:flatbuffers.Offset) {
  builder.addFieldOffset(2, unk3Offset, 0);
}

static createUnk3Vector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createUnk3Vector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createUnk3Vector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startUnk3Vector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addScalingGrids(builder:flatbuffers.Builder, scalingGridsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, scalingGridsOffset, 0);
}

static startScalingGridsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(16, numElems, 4);
}

static addMovieClipFrameElements(builder:flatbuffers.Builder, movieClipFrameElementsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, movieClipFrameElementsOffset, 0);
}

static startMovieClipFrameElementsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(6, numElems, 2);
}

static addShapePoints(builder:flatbuffers.Builder, shapePointsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, shapePointsOffset, 0);
}

static startShapePointsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(12, numElems, 4);
}

static addMatrixBanks(builder:flatbuffers.Builder, matrixBanksOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, matrixBanksOffset, 0);
}

static createMatrixBanksVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMatrixBanksVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endFBResources(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishFBResourcesBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedFBResourcesBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

static createFBResources(builder:flatbuffers.Builder, stringsOffset:flatbuffers.Offset, unk2Offset:flatbuffers.Offset, unk3Offset:flatbuffers.Offset, scalingGridsOffset:flatbuffers.Offset, movieClipFrameElementsOffset:flatbuffers.Offset, shapePointsOffset:flatbuffers.Offset, matrixBanksOffset:flatbuffers.Offset):flatbuffers.Offset {
  FBResources.startFBResources(builder);
  FBResources.addStrings(builder, stringsOffset);
  FBResources.addUnk2(builder, unk2Offset);
  FBResources.addUnk3(builder, unk3Offset);
  FBResources.addScalingGrids(builder, scalingGridsOffset);
  FBResources.addMovieClipFrameElements(builder, movieClipFrameElementsOffset);
  FBResources.addShapePoints(builder, shapePointsOffset);
  FBResources.addMatrixBanks(builder, matrixBanksOffset);
  return FBResources.endFBResources(builder);
}
}
